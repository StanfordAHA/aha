# Agents must have tag hostname=<hostname>
# And then this will guarantee that all steps run on the same host, see?
agents: { hostname: $BUILDKITE_AGENT_META_DATA_HOSTNAME }

env:
  # Default config is "pr_aha"
  CONFIG: ${CONFIG:-pr_aha}

  # "COMMON" is a dir where we can pass information from one step to another
  COMMON: /var/lib/buildkite-agent/builds/DELETEME-$BUILDKITE_BUILD_NUMBER

  REGRESS_METAHOOKS: $$COMMON/regress-metahooks.sh
  IMAGE: garnet:aha-flow-build-$BUILDKITE_BUILD_NUMBER
  TAG: aha-flow-build-$BUILDKITE_BUILD_NUMBER

steps:

- label: "Build Docker Image"
  plugins:
  # Override standard checkout procedure with custom checkout script
  - uber-workflow/run-without-clone:

  # My hooks
  - improbable-eng/metahook:

      # Clone aha repo and optionally update submod according to where build request originated:
      # Req from aha repo:    check out aha commit BUILDKITE_COMMIT
      # Req from submod repo: check out aha master branch, update submod w BUILDKITE_COMMIT
      pre-checkout: |
        echo "+++ BDI PRE CHECKOUT HOOK"
        set +u     # nounset? not on my watch!

        # Clone the aha repo; starting in root dir '/' I think
        echo I am in dir `pwd`
        aha_clone=$BUILDKITE_BUILD_CHECKOUT_PATH;
        set -x
        /bin/rm -rf $$aha_clone; mkdir -p $$aha_clone
        git clone https://github.com/StanfordAHA/aha $$aha_clone; cd $$aha_clone;
        git remote set-url origin https://github.com/StanfordAHA/aha     # Why?
        git clean -ffxdq
        set +x
        bin=$BUILDKITE_BUILD_CHECKOUT_PATH/.buildkite/bin

        if [ "$$AHA_SUBMOD_FLOW_COMMIT" ]; then
            echo 'Submod pull requests use master branch (sometimes overridden by DEV_BRANCH)'
            # (aha-flow steps is responsible for setting DEV_BRANCH)
            # (https://buildkite.com/stanford-aha/aha-flow/settings/steps)
            git checkout $$DEV_BRANCH || echo no dev branch found, continuing with master

            # Make sure env var BUILDKITE_PULL_REQUEST_REPO is set correctly
            source $$bin/update-pr-repo.sh
        else
            echo 'Aha push/PR uses pushed branch'
            git checkout $$BUILDKITE_COMMIT
        fi


        # If build was triggered by a pull request, annotate build with
        #    links pointing to pull request on github.
        # Set REQUEST_TYPE to one of "AHA_PUSH", "AHA_PR", or "SUBMOD_PR"
        # Set PR_REPO_TAIL to submod associated with the PR, e.g. "canal"
        # Add REQUEST_TYPE env temp file for use by later steps
        source $$bin/set-trigfrom-and-reqtype.sh

        ~/bin/status-update --force pending   # Send "pending" status to github PR page

        # Checkout and update correct aha branch and submodules
        source $$bin/custom-checkout.sh

      # Send regression test pass-fail info to github pull request page
      pre-exit: |
        echo "+++ CHECKING EXIT STATUS"; set -x
        echo "Send status to github, delete docker image if job failed"

        # status-update exit status will tell us if this step has failed
        if ! ~/bin/status-update pending; then
            # Build failed already, remove the docker image and begone
            (set -x; docker image rm "$$IMAGE" --no-prune) || echo okay
        fi

  commands:
  - echo "+++ BDI PIPELINE.XML COMMANDS BEGIN"

  # Remove docker images older than one day
  - echo "--- Cleanup old docker images"
  - docker image ls | awk '/(days|weeks|months) ago/ {print}' || echo okay
  - docker image ls | awk '/(days|weeks|months) ago/ {print $$3}' | xargs docker image rm || echo okay

  # Remove DELETEME* dirs older than one week
  - echo "--- Cleanup old common areas"
  - find /var/lib/buildkite-agent/builds/DELETEME* -type d -mtime +7 -exec /bin/rm -rf {} \; || echo okay

  - echo "--- Save repo things in common area"
  - mkdir -p $$COMMON
  - cp $$BUILDKITE_BUILD_CHECKOUT_PATH/.buildkite/bin/regress-metahooks.sh $$COMMON

  - echo "--- DEBUG DOCKER TRASH"
  - set -x; docker images; docker ps;

  - echo "--- Remove 700MB of clockwork, halide metadata"
  - dotgit=.git/modules/clockwork;          du -shx $$dotgit; /bin/rm -rf $$dotgit
  - dotgit=.git/modules/Halide-to-Hardware; du -shx $$dotgit; /bin/rm -rf $$dotgit

  - echo "--- Creating garnet Image"
  - docker build --progress plain . -t "$$IMAGE"

  - echo "--- Pruning Docker Images"
  - yes | docker image prune -a --filter "until=6h" --filter=label='description=garnet' || true

  - echo "--- BDI PIPELINE.XML COMMANDS END"

- wait: ~

########################################################################
# AMBER GOLD step

# Can unskip this step when/if want to monitor when/whether RTL changes
- label: "Amber Gold RTL"
  # Comment-out the line below when/if want to guarantee RTL stability
  skip: true
  soft_fail: true  # So that failing gold check does not fail pipeline.
  plugins:
    - uber-workflow/run-without-clone:  # Don't need clone when using docker
    - docker#v3.2.0:
        image: garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}
        volumes: ["/cad/:/cad"]
        shell:   ["/bin/bash", "-e", "-c"]
        mount-checkout: false
  commands: |
    echo "/aha/.buildkite/bin/rtl-goldcheck.sh amber"
    if ! /aha/.buildkite/bin/rtl-goldcheck.sh amber; then
        msg="Amber gold check FAILED. This is not fatal. But it really should be fixed."
        echo "++ $$msg"
        echo "$$msg" | buildkite-agent annotate --style "error" --context amber
        exit 13
    fi

########################################################################
# ONYX GOLD step

# Can unskip this step when/if want to monitor when/whether RTL changes
- label: "Onyx Gold"
  # Comment-out the line below when/if want to guarantee RTL stability
  skip: true
  soft_fail: true  # So that failing gold check does not fail pipeline.
  plugins:
    - uber-workflow/run-without-clone:  # Don't need clone when using docker
    - docker#v3.2.0:
        image: garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}
        volumes: ["/cad/:/cad"]
        shell:   ["/bin/bash", "-e", "-c"]
        mount-checkout: false
  commands: |
    echo "/aha/.buildkite/bin/rtl-goldcheck.sh onyx"
    if ! /aha/.buildkite/bin/rtl-goldcheck.sh onyx; then
        msg="Onyx gold check FAILED. This is not fatal. But it really should be fixed."
        echo "++ $$msg"
        echo "$$msg" | buildkite-agent annotate --style "error" --context onyx
        exit 13
    fi

########################################################################
# ZIRCON GOLD step

# Can unskip this step when/if want to monitor when/whether RTL changes
- label: "Zircon Gold"
  key: "zircon_gold"
  # Change this to true if want to make changes to zircon RTL
  skip: false
  soft_fail: false  # Failing gold check will fail pipeline.
  plugins:
    - uber-workflow/run-without-clone:  # Don't need clone when using docker
    - docker#v3.2.0:
        image: garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}
        volumes: ["/cad/:/cad"]
        shell:   ["/bin/bash", "-e", "-c"]
        mount-checkout: false
  commands: |
    echo "/aha/.buildkite/bin/rtl-goldcheck.sh zircon"
    if ! /aha/.buildkite/bin/rtl-goldcheck.sh zircon; then
        msg="Zircon gold check FAILED. We don't want to touch Zircon RTL for now."
        echo "++ $$msg"
        echo "$$msg" | buildkite-agent annotate --style "error" --context onyx
        exit 13
    fi

########################################################################
# STEP: fast suite

# Not sure what's going on down there in the other steps with the .TEST
# file and the metahooks and all...?  But this seems to work just fine?

# Oops I just remembered why we need the `regress-metahooks` indirection.
# This updates the docker image with sobmodule information when the CI is
# triggered from a submodule e.g. "garnet" or "lake" :(

- label: "Fast"
  env: { CONTAINER: deleteme-regress0-$BUILDKITE_BUILD_NUMBER }

  plugins:
    - uber-workflow/run-without-clone:

    - improbable-eng/metahook:
        pre-command: $REGRESS_METAHOOKS --pre-command
        pre-exit:    $REGRESS_METAHOOKS --pre-exit

  command: REGRESSION_STEP=0 $REGRESS_METAHOOKS --commands

########################################################################
# NOTES: onyx regressions

# We report success to the aha-flow app by removing the .TEST file, which is
# created in the post-checkout hook and checked-for in the pre-exit hook.

# Instead of multiple similar onyx-regression steps, could maybe do
# some kind of $$bin/gen-steps | docker-agent upload

########################################################################
# STEP: onyx regression 1

- label: "Regress 1"
  key: "regress1"
  depends_on: "zircon_gold"
  env: { CONTAINER: deleteme-regress1-$BUILDKITE_BUILD_NUMBER }

  plugins:
    - uber-workflow/run-without-clone:

    - improbable-eng/metahook:
        pre-command: $REGRESS_METAHOOKS --pre-command
        pre-exit:    $REGRESS_METAHOOKS --pre-exit

  command: REGRESSION_STEP=1 $REGRESS_METAHOOKS --commands

########################################################################
# STEP: onyx regression 2

- label: "Regress 2"
  key: "regress2"
  depends_on: "zircon_gold"
  env: { CONTAINER: deleteme-regress2-$BUILDKITE_BUILD_NUMBER }

  plugins:
    - uber-workflow/run-without-clone:
    - improbable-eng/metahook:
        pre-command: $REGRESS_METAHOOKS --pre-command
        pre-exit:    $REGRESS_METAHOOKS --pre-exit

  command: REGRESSION_STEP=2 $REGRESS_METAHOOKS --commands

########################################################################
# STEP: onyx regression 3

- label: "Regress 3"
  key: "regress3"
  depends_on: "zircon_gold"
  env: { CONTAINER: deleteme-regress3-$BUILDKITE_BUILD_NUMBER }

  plugins:
    - uber-workflow/run-without-clone:
    - improbable-eng/metahook:
        pre-command: $REGRESS_METAHOOKS --pre-command
        pre-exit:    $REGRESS_METAHOOKS --pre-exit

  command: REGRESSION_STEP=3 $REGRESS_METAHOOKS --commands

########################################################################
# STEP: Cleanup

# Wait for all steps to complete before sending out final status
# This step should run regardless of whether prev steps failed
- wait: { continue_on_failure: true }

- label: "Cleanup"

  # Don't need time-wasting clone just for cleanup! Right?
  plugins:
    - uber-workflow/run-without-clone:

  command: |

    echo '- Show outcomes from each regression step'
    echo fast outcome:     `buildkite-agent step get "outcome" --step "regress0"`
    echo regress1 outcome: `buildkite-agent step get "outcome" --step "regress1"`
    echo regress2 outcome: `buildkite-agent step get "outcome" --step "regress2"`
    echo regress3 outcome: `buildkite-agent step get "outcome" --step "regress3"`

    echo '- Use FAIL to summarize overall result'
    FAIL=
    set -x
    [ $(buildkite-agent step get "outcome" --step "regress0") == "passed" ] || FAIL=True
    [ $(buildkite-agent step get "outcome" --step "regress1") == "passed" ] || FAIL=True
    [ $(buildkite-agent step get "outcome" --step "regress2") == "passed" ] || FAIL=True
    [ $(buildkite-agent step get "outcome" --step "regress3") == "passed" ] || FAIL=True
    echo '-- FAIL=$$FAIL'

    echo '- Send summary outcome "success" or "failure" to github PR'
    # Note, /home/buildkite-agent/bin/status-update must exist on agent machine
    # Also see ~steveri/bin/status-update on kiwi
    [ "$$FAIL" ] && ~/bin/status-update --force failure || ~/bin/status-update --force success

    echo '- Clean up your mess'
    test -e $REGRESS_METAHOOKS && rm $REGRESS_METAHOOKS || echo okay
    test -d $COMMON && rmdir $COMMON || echo okay
    /bin/rm -f /var/lib/buildkite-agent/builds/DELETEME/env-$BUILDKITE_BUILD_NUMBER
