# To turn daemon on or off, search code below and change to one of:
#   aha regress $$CONFIG --daemon auto  # Use daemon
#   aha regress $$CONFIG                # No daemon

env:
  CONFIG: ${CONFIG:-daily}
  REGRESS_METAHOOKS: $BUILDKITE_BUILD_CHECKOUT_PATH/.buildkite/bin/regress-metahooks.sh

steps:

- label: ":wrench: Build Docker Image"
  key: "docker-build"
  plugins:
  # Override standard checkout procedure with custom checkout script
  - uber-workflow/run-without-clone:

  # My hooks
  - improbable-eng/metahook:

      # Clone aha repo and optionally update submod according to where build request originated:
      # Req from aha repo:    check out aha commit BUILDKITE_COMMIT
      # Req from submod repo: check out aha master branch, update submod w BUILDKITE_COMMIT
      pre-checkout: |
        echo "+++ BDI PRE CHECKOUT HOOK"
        set +u     # nounset? not on my watch!

        # Clone the aha repo; starting in root dir '/' I think
        echo I am in dir `pwd`
        aha_clone=$BUILDKITE_BUILD_CHECKOUT_PATH;
        set -x
        /bin/rm -rf $$aha_clone; mkdir -p $$aha_clone
        git clone https://github.com/StanfordAHA/aha $$aha_clone; cd $$aha_clone;
        git remote set-url origin https://github.com/StanfordAHA/aha     # Why?
        git clean -ffxdq
        set +x
        bin=$BUILDKITE_BUILD_CHECKOUT_PATH/.buildkite/bin

        # Make sure env var BUILDKITE_PULL_REQUEST_REPO is set correctly
        source $$bin/update-pr-repo.sh

        # If build was triggered by a pull request, annotate build with
        #    links pointing to pull request on github.
        # Set REQUEST_TYPE to one of "AHA_PUSH", "AHA_PR", or "SUBMOD_PR"
        # Set PR_REPO_TAIL to submod associated with the PR, e.g. "canal"
        # Add REQUEST_TYPE env temp file for use by later steps
        source $$bin/set-trigfrom-and-reqtype.sh

        ~/bin/status-update --force pending   # Send "pending" status to github PR page

        # Checkout and update correct aha branch and submodules
        source $$bin/custom-checkout.sh

      # Send regression test pass-fail info to github pull request page
      pre-exit: |
        echo "+++ CHECKING EXIT STATUS"; set -x
        echo "Send status to github, delete docker image if job failed"

        # status-update exit status will tell us if this step has failed
        if ! ~/bin/status-update pending; then
            # Build failed already, remove the docker image and begone
            (set -x; docker image rm "garnet:aha-flow-build-$${BUILDKITE_BUILD_NUMBER}" --no-prune)
        fi

  commands:
  - echo "+++ BDI PIPELINE.XML COMMANDS BEGIN"

  - echo "--- DEBUG DOCKER TRASH"
  - set -x; docker images; docker ps;

  - echo "--- Creating garnet Image"
  - docker build . -t "garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}"

  - echo "--- Pruning Docker Images"
  - yes | docker image prune -a --filter "until=6h" --filter=label='description=garnet' || true

  - echo "--- BDI PIPELINE.XML COMMANDS END"

  agents:
    docker: true

# Set soft_fail so that failing gold check does not fail pipeline.
- label: ":hammer: Amber Gold RTL 1m"
  agents: { docker: true }  # must run on r7cad-docker b/c that's where we built the docker image!
  key: "goldcheck-amber"
  depends_on: "docker-build"
  soft_fail: true  
  plugins:
    - uber-workflow/run-without-clone:  # Don't need clone if using docker
    - docker#v3.2.0:
        image:   garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}
        volumes: ["/cad/:/cad"]
        shell:   ["/bin/bash", "-e", "-c"]
        mount-checkout: false
  commands: |
    echo "/aha/.buildkite/bin/rtl-goldcheck.sh amber"
    if ! /aha/.buildkite/bin/rtl-goldcheck.sh amber; then
        msg="Amber gold check FAILED. This is not fatal. But it really should be fixed."
        echo "++ $$msg"
        echo "$$msg" | buildkite-agent annotate --style "error" --context amber
        exit 13
    fi

# Set soft_fail so that failing gold check does not fail pipeline.
- label: ":hammer: Onyx Gold RTL 1m"
  agents: { docker: true }  # must run on r7cad-docker b/c that's where we built the docker image!
  key: "goldcheck-onyx"
  depends_on: "docker-build"
  soft_fail: true  
  plugins:
    - uber-workflow/run-without-clone:  # Don't need clone if using docker
    - docker#v3.2.0:
        image:   garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}
        volumes: ["/cad/:/cad"]
        shell:   ["/bin/bash", "-e", "-c"]
        mount-checkout: false
  commands: |
    echo "/aha/.buildkite/bin/rtl-goldcheck.sh onyx"
    if ! /aha/.buildkite/bin/rtl-goldcheck.sh onyx; then
        msg="Onyx gold check FAILED. This is not fatal. But it really should be fixed."
        echo "++ $$msg"
        echo "$$msg" | buildkite-agent annotate --style "error" --context onyx
        exit 13
    fi

# Instead of multiple similar OIT steps, could maybe do some kind of $$bin/gen-steps | docker-agent upload

- label: ":hammer: Onyx Integration Tests"
  key: "integration-tests"
  depends_on: "docker-build"
  agents: { docker: true }  # must run on r7cad-docker b/c that's where we built the docker image!

  plugins:
    - uber-workflow/run-without-clone:

    - docker#v3.2.0:
        image: garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}
        volumes:
          - "/cad/:/cad"
          - "./temp:/buildkite:rw"
        mount-checkout: false
        skip-checkout: true
        propagate-environment: true
        environment:
          - CONFIG
          - FLOW_REPO
        shell: ["/bin/bash", "-e", "-c"]

    # Offload OIT metahooks to like $$bin/pipeline-metahooks.sh
    # - $$bin/pipeline-metahooks.sh --pre-command
    # - $$bin/pipeline-metahooks.sh --pre-command

    - improbable-eng/metahook:
        pre-command: $REGRESS_METAHOOKS --pre-command
        pre-exit:    $REGRESS_METAHOOKS --pre-exit

  commands:
  - |
    if ! test -e /buildkite/.TEST; then
        echo "+++ No .TEST detected, so skip redundant regressions"
        exit
    fi
  - |
    if test -e /buildkite/DO_PR; then
        echo "--- DO_PR SET (TRUE)"
    else
        echo "--- DO_PR UNSET (FALSE)"
    fi
  - source /aha/bin/activate
  - source /cad/modules/tcl/init/sh
  - module load base incisive xcelium/19.03.003 vcs/T-2022.06-SP2
  # make /bin/sh symlink to bash instead of dash:
  - echo "dash dash/sh boolean false" | debconf-set-selections
  - DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash
  - apt update
  - apt install time
  - ls /aha
  - echo    "--- PIP FREEZE"; pip freeze
  - echo -n "--- GARNET VERSION "; (cd garnet && git rev-parse --verify HEAD)
  # Run regression tests
  - if test -e /buildkite/DO_PR; then
      echo "Trigger came from submod repo pull request; use pr config";
      export CONFIG=pr;
    else
      echo "Trigger came from aha repo; use default config";
    fi;




  # ORIGINAL:
  # - aha regress $$CONFIG --daemon auto --include-dense-only-tests

  # EXPERIMENTS:
  - aha regress quickquick
  # - aha regress conv1_dense --include-dense-only-tests
  # - aha regress conv1_sparse  # this worked, see aha-flow build 10120
  # - aha regress conv2_dense  # (hardwired include-dense on the regress.py conv2_dense side...)




  # We report success to the aha-flow app by removing the .TEST file,
  # which is created in the post-checkout hook and checked for in the
  # pre-exit hook.

  # Okay to remove or check but DO NOT CREATE anything in /buildkite, it is owned by root :(
  - echo "--- Removing Failure Canary"
  - ls -al /buildkite
  - rm -rf /buildkite/.TEST
  - ls -al /buildkite

- wait: { continue_on_failure: true } # One step at a time + continue on failure

- label: ":skull_and_crossbones: Delete Docker Image"
  # Set soft_fail so that failing cleanup does not fail pipeline.
  soft_fail: true
  depends_on:
  - "integration-tests"
  - "goldcheck-amber"
  - "goldcheck-onyx"
  commands:
  # '--no-prune' so it doesn't prune dangling images, we want to use them for the Docker cache.
  - docker image rm "garnet:aha-flow-build-${BUILDKITE_BUILD_NUMBER}" --no-prune
  agents:
    docker: true
  plugins:
  - uber-workflow/run-without-clone:
